// Docs: https://pris.ly/d/prisma-schema

generator kysely {
  provider = "prisma-generator-kysely"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MembershipRole {
  ADMIN
  STANDARD
  LIMITED
}

enum MembershipStatus {
  FREE
  PAID
}

model AuthAllowList {
  id     String @id @default(cuid())
  domain String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String @id @default(cuid())
  publicId String @unique @db.VarChar(500)

  email         String    @unique
  emailVerified DateTime? @default(now())

  firstName String  @db.VarChar(200)
  lastName  String  @db.VarChar(200)
  avatar    String? @db.VarChar(2048)

  memberships Membership[]

  linkedinPublicId String?

  experience Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id       String @id @default(cuid())
  publicId String @unique @db.VarChar(500)

  name             String  @db.VarChar(200)
  industry         String
  description      String  @db.Text
  shortDescription String  @db.Text
  logo             String? @db.VarChar(2048)

  linkedinPublicId String?

  emailDomains EmailDomain[]
  members      Membership[]

  personProspects AModel[]

  billingEmail         String?
  customerId           String?   @unique
  subscriptionId       String?   @unique
  subscriptionPaidUpTo DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailDomain {
  id                String   @id @default(cuid())
  domain            String
  domainVerified    DateTime @default(now())
  verificationEmail String

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([domain, organizationId])
  @@index([domain])
  @@index([organizationId])
}

model Membership {
  id    String         @id @default(cuid())
  role  MembershipRole
  title String         @db.VarChar(200)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  status          MembershipStatus @default(FREE)
  statusUpdatedAt DateTime         @default(now())

  bonus Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([organizationId, userId])
}

////////////////////////////////////////////////////////////////

model AModel {
  id        Int     @id @default(dbgenerated("UUID_SHORT()"))
  publicId  String  @unique
  email     String?
  firstName String  @db.VarChar(200)
  lastName  String  @db.VarChar(200)
  avatar    String? @db.VarChar(2048)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  memberOwnerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, memberOwnerId, email])
  @@unique([organizationId, memberOwnerId, publicId])
  @@index([organizationId])
  @@index([organizationId, memberOwnerId])
}

model BModel {
  id String @id @default(dbgenerated("UUID()"))

  personProspectId Int @unique

  experience Json

  sourceUpdatedAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
